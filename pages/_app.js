import * as React from "react";
import PropTypes from "prop-types";
import Head from "next/head";
import createEmotionCache from "../src/createEmotionCache";
import { CacheProvider } from "@emotion/react";
import { ThemeProvider } from "@mui/material/styles";
import CssBaseline from "@mui/material/CssBaseline";
import theme from "../src/theme";
import { AuthContextProvider } from "../src/context/AuthContext";
import ProtectedRoutes from "../src/context/ProtectedRoutes";
import { useRouter } from "next/router";
import Navbar from "../src/layout/Navbar";
import { ToastContainer } from "react-toastify";
import "react-toastify/dist/ReactToastify.css";
import { LocalizationProvider } from "@mui/x-date-pickers";
import { AdapterDateFns } from "@mui/x-date-pickers/AdapterDateFns";

const clientSideEmotionCache = createEmotionCache();

const noAuthRequired = ["/", "/login", "/signup"];

export default function MyApp(props) {
  const { Component, emotionCache = clientSideEmotionCache, pageProps } = props;
  const router = useRouter();

  return (
    <>
      <Head>
        <title>Sleep Tracker</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="initial-scale=1, width=device-width" />
      </Head>
      <ToastContainer />
      <CacheProvider value={emotionCache}>
        <ThemeProvider theme={theme}>
          <CssBaseline />
          <AuthContextProvider>
            <LocalizationProvider dateAdapter={AdapterDateFns}>
              <Navbar />
              {noAuthRequired.includes(router.pathname) ? (
                <Component {...pageProps} />
              ) : (
                <ProtectedRoutes>
                  <Component {...pageProps} />
                </ProtectedRoutes>
              )}
            </LocalizationProvider>
          </AuthContextProvider>
        </ThemeProvider>
      </CacheProvider>
    </>
  );
}

MyApp.propTypes = {
  Component: PropTypes.elementType.isRequired,
  emotionCache: PropTypes.object,
  pageProps: PropTypes.object.isRequired,
};
